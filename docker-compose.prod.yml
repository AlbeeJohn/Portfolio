version: '3.8'

# Production Docker Compose Configuration
# Optimized for production deployment with security and performance

services:
  portfolio:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    env_file:
      - backend/.env
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - portfolio-logs:/var/log/nginx
    depends_on:
      - mongo
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - portfolio-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  mongo:
    image: mongo:7.0
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-changeme123}
      - MONGO_INITDB_DATABASE=portfolio_db
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - portfolio-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: mongod --auth

  # Optional: Redis for advanced caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - portfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    command: redis-server --appendonly yes --maxmemory 100mb --maxmemory-policy allkeys-lru

  # Optional: Log aggregation
  log-collector:
    image: fluent/fluent-bit:latest
    volumes:
      - portfolio-logs:/var/log/nginx:ro
      - ./config/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - portfolio-network
    depends_on:
      - portfolio
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - portfolio-network
    restart: unless-stopped
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - portfolio-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  mongo-data:
    driver: local
  mongo-config:
    driver: local
  redis-data:
    driver: local
  portfolio-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  portfolio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production deployment commands:
# 
# Basic deployment:
# docker-compose -f docker-compose.prod.yml up -d
#
# With monitoring:
# docker-compose -f docker-compose.prod.yml --profile monitoring up -d
#
# Scale portfolio service:
# docker-compose -f docker-compose.prod.yml up -d --scale portfolio=2
#
# Update deployment:
# docker-compose -f docker-compose.prod.yml pull
# docker-compose -f docker-compose.prod.yml up -d --force-recreate